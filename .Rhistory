}
transf_yearly <- function(freq){
if (is.na(freq)){
return (NA)
} else if (freq == "Year"){
return (1)
} else if (freq == "Month"){
return (12)
} else if (freq == "Bi-Weekly"){
return (26)
} else if (freq == "Week"){
return (52)
} else if (freq == "Hour"){
return (2080)
}
}
clean_df <- function(df){
# ***************************************************************************** #
# Clean the data frame                                                          #
# Input: raw data frame                                                         #
# Return: data frame cleaned                                                    #
# ***************************************************************************** #
df = select_col(df)
df = mutate_df(df)
df = df %>%
transmute(decision_date = set_date(decision_date, "%Y-%m-%d"),
case_received_date = set_date(case_received_date, "%Y-%m-%d"),
days_to_decide = decision_date - case_received_date,
case_status = set_char(remove_null(case_status)),
employer_name = set_char(remove_null(employer_name)),
employer_num_employees = set_numeric(remove_null(employer_num_employees)),
employer_yr_estab = set_numeric(remove_null(employer_yr_estab)),
pw_soc_title = set_char(remove_null(pw_soc_title)),
pw_amount = sapply(pw_unit_of_pay, transf_yearly) * pw_amount,
wage_offer_mean = (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_from / 2) +
(sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_to / 2),
job_info_work_city = set_char(remove_null(job_info_work_city)),
job_info_work_state = set_char(remove_null(job_info_work_state)),
job_info_job_title = set_char(remove_null(job_info_job_title)),
job_info_education = set_char(remove_null(job_info_education)),
job_info_major = set_char(remove_null(job_info_major)),
job_info_experience_num_months = set_numeric(remove_null(job_info_experience_num_months)),
country_of_citizenship = set_char(remove_null(country_of_citizenship)),
visa_type = set_char(remove_null(class_of_admission)),
foreign_worker_info_education = set_char(remove_null(foreign_worker_info_education)),
foreign_worker_info_major = set_char(remove_null(foreign_worker_info_major)),
fw_info_yr_rel_edu_completed = set_numeric(remove_null(fw_info_yr_rel_edu_completed)),
foreign_worker_info_inst = set_char(remove_null(foreign_worker_info_inst)),
naics_us_title = set_char(remove_null(naics_us_title))
)
return (df)
}
dataset = data.frame()
rm(list = ls())
library(readxl)
library(dplyr)
setwd("~/Documents/NYCDSA/Bootcamp_Winter_2019/Project2-ShinyApp")
select_col <- function(df){
# ***************************************************************************** #
# Select the columns from the raw data that is relevant for the analysis        #
# Input: raw data frame                                                         #
# Return: data frame with the columns selected                                  #
# ***************************************************************************** #
# Vector with the desire columns
col_sel = c("DECISION_DATE",
"CASE_STATUS",
"CASE_RECEIVED_DATE",
"EMPLOYER_NAME",
"EMPLOYER_NUM_EMPLOYEES",
"EMPLOYER_YR_ESTAB",
"PW_SOC_TITLE",
"PW_AMOUNT_9089",
"PW_UNIT_OF_PAY_9089",
"WAGE_OFFER_FROM_9089",
"WAGE_OFFER_TO_9089",
"WAGE_OFFER_UNIT_OF_PAY_9089",
"JOB_INFO_WORK_CITY",
"JOB_INFO_WORK_STATE",
"JOB_INFO_JOB_TITLE",
"JOB_INFO_EDUCATION",
"JOB_INFO_MAJOR",
"JOB_INFO_EXPERIENCE_NUM_MONTHS",
"COUNTRY_OF_CITIZENSHIP",
"CLASS_OF_ADMISSION",
"FOREIGN_WORKER_INFO_EDUCATION",
"FOREIGN_WORKER_INFO_MAJOR",
"FW_INFO_YR_REL_EDU_COMPLETED",
"FOREIGN_WORKER_INFO_INST",
"NAICS_US_TITLE")
df = df %>%
select(col_sel)
colnames(df) = tolower(colnames(df))
colnames(df) = gsub(colnames(df), pattern = "_9089", replacement = "")
return (df)
}
mutate_df <- function(df){
df = df %>%
mutate(pw_unit_of_pay = remove_null(pw_unit_of_pay),
wage_offer_unit_of_pay = remove_null(wage_offer_unit_of_pay),
wage_offer_to = ifelse(is.na(wage_offer_to), wage_offer_from, wage_offer_to))
return (df)
}
remove_null <- function(x){
return (ifelse(x == "NULL", NA, x))
}
set_numeric <- function(x){
return (as.numeric(x))
}
set_date <- function(x, fmt){
return (as.Date(x, format = fmt))
}
set_char <- function(x){
return (as.character(x))
}
transf_yearly <- function(freq){
if (is.na(freq)){
return (NA)
} else if (freq == "Year"){
return (1)
} else if (freq == "Month"){
return (12)
} else if (freq == "Bi-Weekly"){
return (26)
} else if (freq == "Week"){
return (52)
} else if (freq == "Hour"){
return (2080)
}
}
clean_df <- function(df){
# ***************************************************************************** #
# Clean the data frame                                                          #
# Input: raw data frame                                                         #
# Return: data frame cleaned                                                    #
# ***************************************************************************** #
df = select_col(df)
df = mutate_df(df)
df = df %>%
transmute(decision_date = set_date(decision_date, "%Y-%m-%d"),
case_received_date = set_date(case_received_date, "%Y-%m-%d"),
days_to_decide = decision_date - case_received_date,
case_status = set_char(remove_null(case_status)),
employer_name = set_char(remove_null(employer_name)),
employer_num_employees = set_numeric(remove_null(employer_num_employees)),
employer_yr_estab = set_numeric(remove_null(employer_yr_estab)),
pw_soc_title = set_char(remove_null(pw_soc_title)),
pw_amount = sapply(pw_unit_of_pay, transf_yearly) * pw_amount,
wage_offer_mean = (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_from / 2) +
(sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_to / 2),
job_info_work_city = set_char(remove_null(job_info_work_city)),
job_info_work_state = set_char(remove_null(job_info_work_state)),
job_info_job_title = set_char(remove_null(job_info_job_title)),
job_info_education = set_char(remove_null(job_info_education)),
job_info_major = set_char(remove_null(job_info_major)),
job_info_experience_num_months = set_numeric(remove_null(job_info_experience_num_months)),
country_of_citizenship = set_char(remove_null(country_of_citizenship)),
visa_type = set_char(remove_null(class_of_admission)),
foreign_worker_info_education = set_char(remove_null(foreign_worker_info_education)),
foreign_worker_info_major = set_char(remove_null(foreign_worker_info_major)),
fw_info_yr_rel_edu_completed = set_numeric(remove_null(fw_info_yr_rel_edu_completed)),
foreign_worker_info_inst = set_char(remove_null(foreign_worker_info_inst)),
naics_us_title = set_char(remove_null(naics_us_title))
)
return (df)
}
dataset = data.frame()
for (fname in lst_fnames){
path = paste0("./data/", fname)
temp = data.frame(read_xlsx(path = path, sheet = 1, col_names = TRUE), stringsAsFactors = FALSE)
temp = clean_df(temp)
dataset = rbind(dataset, temp)
}
dataset = data.frame()
lst_fnames = read.csv("./data/lst_fnames.txt", header = FALSE)[[1]]
for (fname in lst_fnames){
path = paste0("./data/", fname)
temp = data.frame(read_xlsx(path = path, sheet = 1, col_names = TRUE), stringsAsFactors = FALSE)
temp = clean_df(temp)
dataset = rbind(dataset, temp)
}
dataset = data.frame()
lst_fnames = read.csv("./data/lst_fnames.txt", header = FALSE)[[1]]
for (fname in lst_fnames){
path = paste0("./data/", fname)
temp = data.frame(read_xlsx(path = path, sheet = 1, col_names = TRUE), stringsAsFactors = FALSE)
temp = clean_df(temp)
dataset = rbind(dataset, temp)
}
t = data.frame(read_xlsx("./data/2018.xlsx", sheet = 1, col_names = TRUE), stringsAsFactors = FALSE)
s = select_col(t)
s = mutate_df(s)
r = clean_df(t)
r = s %>%
transmute(decision_date = set_date(decision_date, "%Y-%m-%d")
# case_received_date = set_date(case_received_date, "%Y-%m-%d"),
# days_to_decide = decision_date - case_received_date,
# case_status = set_char(remove_null(case_status)),
# employer_name = set_char(remove_null(employer_name)),
# employer_num_employees = set_numeric(remove_null(employer_num_employees)),
# employer_yr_estab = set_numeric(remove_null(employer_yr_estab)),
# pw_soc_title = set_char(remove_null(pw_soc_title)),
# pw_amount = sapply(pw_unit_of_pay, transf_yearly) * pw_amount,
# wage_offer_mean = (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_from / 2) +
#   (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_to / 2),
# job_info_work_city = set_char(remove_null(job_info_work_city)),
# job_info_work_state = set_char(remove_null(job_info_work_state)),
# job_info_job_title = set_char(remove_null(job_info_job_title)),
# job_info_education = set_char(remove_null(job_info_education)),
# job_info_major = set_char(remove_null(job_info_major)),
# job_info_experience_num_months = set_numeric(remove_null(job_info_experience_num_months)),
# country_of_citizenship = set_char(remove_null(country_of_citizenship)),
# visa_type = set_char(remove_null(class_of_admission)),
# foreign_worker_info_education = set_char(remove_null(foreign_worker_info_education)),
# foreign_worker_info_major = set_char(remove_null(foreign_worker_info_major)),
# fw_info_yr_rel_edu_completed = set_numeric(remove_null(fw_info_yr_rel_edu_completed)),
# foreign_worker_info_inst = set_char(remove_null(foreign_worker_info_inst)),
# naics_us_title = set_char(remove_null(naics_us_title))
)
r = s %>%
transmute(decision_date = set_date(decision_date, "%Y-%m-%d"),
case_received_date = set_date(case_received_date, "%Y-%m-%d")
# days_to_decide = decision_date - case_received_date,
# case_status = set_char(remove_null(case_status)),
# employer_name = set_char(remove_null(employer_name)),
# employer_num_employees = set_numeric(remove_null(employer_num_employees)),
# employer_yr_estab = set_numeric(remove_null(employer_yr_estab)),
# pw_soc_title = set_char(remove_null(pw_soc_title)),
# pw_amount = sapply(pw_unit_of_pay, transf_yearly) * pw_amount,
# wage_offer_mean = (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_from / 2) +
#   (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_to / 2),
# job_info_work_city = set_char(remove_null(job_info_work_city)),
# job_info_work_state = set_char(remove_null(job_info_work_state)),
# job_info_job_title = set_char(remove_null(job_info_job_title)),
# job_info_education = set_char(remove_null(job_info_education)),
# job_info_major = set_char(remove_null(job_info_major)),
# job_info_experience_num_months = set_numeric(remove_null(job_info_experience_num_months)),
# country_of_citizenship = set_char(remove_null(country_of_citizenship)),
# visa_type = set_char(remove_null(class_of_admission)),
# foreign_worker_info_education = set_char(remove_null(foreign_worker_info_education)),
# foreign_worker_info_major = set_char(remove_null(foreign_worker_info_major)),
# fw_info_yr_rel_edu_completed = set_numeric(remove_null(fw_info_yr_rel_edu_completed)),
# foreign_worker_info_inst = set_char(remove_null(foreign_worker_info_inst)),
# naics_us_title = set_char(remove_null(naics_us_title))
)
r = s %>%
transmute(decision_date = set_date(decision_date, "%Y-%m-%d"),
case_received_date = set_date(case_received_date, "%Y-%m-%d"),
days_to_decide = decision_date - case_received_date,
case_status = set_char(remove_null(case_status))
# employer_name = set_char(remove_null(employer_name)),
# employer_num_employees = set_numeric(remove_null(employer_num_employees)),
# employer_yr_estab = set_numeric(remove_null(employer_yr_estab)),
# pw_soc_title = set_char(remove_null(pw_soc_title)),
# pw_amount = sapply(pw_unit_of_pay, transf_yearly) * pw_amount,
# wage_offer_mean = (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_from / 2) +
#   (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_to / 2),
# job_info_work_city = set_char(remove_null(job_info_work_city)),
# job_info_work_state = set_char(remove_null(job_info_work_state)),
# job_info_job_title = set_char(remove_null(job_info_job_title)),
# job_info_education = set_char(remove_null(job_info_education)),
# job_info_major = set_char(remove_null(job_info_major)),
# job_info_experience_num_months = set_numeric(remove_null(job_info_experience_num_months)),
# country_of_citizenship = set_char(remove_null(country_of_citizenship)),
# visa_type = set_char(remove_null(class_of_admission)),
# foreign_worker_info_education = set_char(remove_null(foreign_worker_info_education)),
# foreign_worker_info_major = set_char(remove_null(foreign_worker_info_major)),
# fw_info_yr_rel_edu_completed = set_numeric(remove_null(fw_info_yr_rel_edu_completed)),
# foreign_worker_info_inst = set_char(remove_null(foreign_worker_info_inst)),
# naics_us_title = set_char(remove_null(naics_us_title))
)
r = s %>%
transmute(decision_date = set_date(decision_date, "%Y-%m-%d"),
case_received_date = set_date(case_received_date, "%Y-%m-%d"),
days_to_decide = decision_date - case_received_date,
case_status = set_char(remove_null(case_status)),
employer_name = set_char(remove_null(employer_name)),
employer_num_employees = set_numeric(remove_null(employer_num_employees)),
employer_yr_estab = set_numeric(remove_null(employer_yr_estab)),
pw_soc_title = set_char(remove_null(pw_soc_title))
# pw_amount = sapply(pw_unit_of_pay, transf_yearly) * pw_amount,
# wage_offer_mean = (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_from / 2) +
#   (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_to / 2),
# job_info_work_city = set_char(remove_null(job_info_work_city)),
# job_info_work_state = set_char(remove_null(job_info_work_state)),
# job_info_job_title = set_char(remove_null(job_info_job_title)),
# job_info_education = set_char(remove_null(job_info_education)),
# job_info_major = set_char(remove_null(job_info_major)),
# job_info_experience_num_months = set_numeric(remove_null(job_info_experience_num_months)),
# country_of_citizenship = set_char(remove_null(country_of_citizenship)),
# visa_type = set_char(remove_null(class_of_admission)),
# foreign_worker_info_education = set_char(remove_null(foreign_worker_info_education)),
# foreign_worker_info_major = set_char(remove_null(foreign_worker_info_major)),
# fw_info_yr_rel_edu_completed = set_numeric(remove_null(fw_info_yr_rel_edu_completed)),
# foreign_worker_info_inst = set_char(remove_null(foreign_worker_info_inst)),
# naics_us_title = set_char(remove_null(naics_us_title))
)
r = s %>%
transmute(decision_date = set_date(decision_date, "%Y-%m-%d"),
case_received_date = set_date(case_received_date, "%Y-%m-%d"),
days_to_decide = decision_date - case_received_date,
case_status = set_char(remove_null(case_status)),
employer_name = set_char(remove_null(employer_name)),
employer_num_employees = set_numeric(remove_null(employer_num_employees)),
employer_yr_estab = set_numeric(remove_null(employer_yr_estab)),
pw_soc_title = set_char(remove_null(pw_soc_title)),
pw_amount = sapply(pw_unit_of_pay, transf_yearly) * pw_amount,
# wage_offer_mean = (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_from / 2) +
#   (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_to / 2),
# job_info_work_city = set_char(remove_null(job_info_work_city)),
# job_info_work_state = set_char(remove_null(job_info_work_state)),
# job_info_job_title = set_char(remove_null(job_info_job_title)),
# job_info_education = set_char(remove_null(job_info_education)),
# job_info_major = set_char(remove_null(job_info_major)),
# job_info_experience_num_months = set_numeric(remove_null(job_info_experience_num_months)),
# country_of_citizenship = set_char(remove_null(country_of_citizenship)),
# visa_type = set_char(remove_null(class_of_admission)),
# foreign_worker_info_education = set_char(remove_null(foreign_worker_info_education)),
# foreign_worker_info_major = set_char(remove_null(foreign_worker_info_major)),
# fw_info_yr_rel_edu_completed = set_numeric(remove_null(fw_info_yr_rel_edu_completed)),
# foreign_worker_info_inst = set_char(remove_null(foreign_worker_info_inst)),
# naics_us_title = set_char(remove_null(naics_us_title))
)
r = s %>%
transmute(decision_date = set_date(decision_date, "%Y-%m-%d"),
case_received_date = set_date(case_received_date, "%Y-%m-%d"),
days_to_decide = decision_date - case_received_date,
case_status = set_char(remove_null(case_status)),
employer_name = set_char(remove_null(employer_name)),
employer_num_employees = set_numeric(remove_null(employer_num_employees)),
employer_yr_estab = set_numeric(remove_null(employer_yr_estab)),
pw_soc_title = set_char(remove_null(pw_soc_title)),
pw_amount = sapply(pw_unit_of_pay, transf_yearly) * pw_amount,
# wage_offer_mean = (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_from / 2) +
#   (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_to / 2),
# job_info_work_city = set_char(remove_null(job_info_work_city)),
# job_info_work_state = set_char(remove_null(job_info_work_state)),
# job_info_job_title = set_char(remove_null(job_info_job_title)),
# job_info_education = set_char(remove_null(job_info_education)),
# job_info_major = set_char(remove_null(job_info_major)),
# job_info_experience_num_months = set_numeric(remove_null(job_info_experience_num_months)),
# country_of_citizenship = set_char(remove_null(country_of_citizenship)),
# visa_type = set_char(remove_null(class_of_admission)),
# foreign_worker_info_education = set_char(remove_null(foreign_worker_info_education)),
# foreign_worker_info_major = set_char(remove_null(foreign_worker_info_major)),
# fw_info_yr_rel_edu_completed = set_numeric(remove_null(fw_info_yr_rel_edu_completed)),
# foreign_worker_info_inst = set_char(remove_null(foreign_worker_info_inst)),
# naics_us_title = set_char(remove_null(naics_us_title))
)
unique(s$pw_unit_of_pay)
sapply(s$pw_unit_of_pay, transf_yearly)
a=sapply(s$pw_unit_of_pay, transf_yearly)
class(a)
typeof(a)
read.csv("./data/lst_fnames.txt", header = FALSE)
read.csv("./data/lst_fnames copy.txt", header = FALSE)
temp = data.frame(read_xlsx("./data/2015.xlsx", sheet = 1, col_names = TRUE), stringsAsFactors = FALSE)
sapply(temp$pw_unit_of_pay, transf_yearly)
sapply(temp$pw_unit_of_pay, transf_yearly)
a=sapply(temp$pw_unit_of_pay, transf_yearly)
View(temp)
temp = select_col(temp)
temp = mutate_df(temp)
sapply(temp$pw_unit_of_pay, transf_yearly)
sapply(temp$pw_unit_of_pay, transf_yearly) * temp$pw_amount
sapply(s$pw_unit_of_pay, transf_yearly)
sapply(s$pw_unit_of_pay, transf_yearly) * s$pw_amount
a=sapply(s$pw_unit_of_pay, transf_yearly)
class(a)
class(s$pw_amount)
b=sapply(temp$pw_unit_of_pay, transf_yearly)
class(b)
class(b$pw_amount)
class(temp$pw_amount)
mutate_df <- function(df){
df = df %>%
mutate(pw_unit_of_pay = remove_null(pw_unit_of_pay),
wage_offer_unit_of_pay = remove_null(wage_offer_unit_of_pay),
wage_offer_from = is.numeric(wage_offer_from),
wage_offer_to = is.numeric(wage_offer_from),
pw_amount = is.numeric(pw_amount),
wage_offer_to = ifelse(is.na(wage_offer_to), wage_offer_from, wage_offer_to)
)
return (df)
}
r = clean_df(t)
library(readxl)
library(dplyr)
setwd("~/Documents/NYCDSA/Bootcamp_Winter_2019/Project2-ShinyApp")
select_col <- function(df){
# ***************************************************************************** #
# Select the columns from the raw data that is relevant for the analysis        #
# Input: raw data frame                                                         #
# Return: data frame with the columns selected                                  #
# ***************************************************************************** #
# Vector with the desire columns
col_sel = c("DECISION_DATE",
"CASE_STATUS",
"CASE_RECEIVED_DATE",
"EMPLOYER_NAME",
"EMPLOYER_NUM_EMPLOYEES",
"EMPLOYER_YR_ESTAB",
"PW_SOC_TITLE",
"PW_AMOUNT_9089",
"PW_UNIT_OF_PAY_9089",
"WAGE_OFFER_FROM_9089",
"WAGE_OFFER_TO_9089",
"WAGE_OFFER_UNIT_OF_PAY_9089",
"JOB_INFO_WORK_CITY",
"JOB_INFO_WORK_STATE",
"JOB_INFO_JOB_TITLE",
"JOB_INFO_EDUCATION",
"JOB_INFO_MAJOR",
"JOB_INFO_EXPERIENCE_NUM_MONTHS",
"COUNTRY_OF_CITIZENSHIP",
"CLASS_OF_ADMISSION",
"FOREIGN_WORKER_INFO_EDUCATION",
"FOREIGN_WORKER_INFO_MAJOR",
"FW_INFO_YR_REL_EDU_COMPLETED",
"FOREIGN_WORKER_INFO_INST",
"NAICS_US_TITLE")
df = df %>%
select(col_sel)
colnames(df) = tolower(colnames(df))
colnames(df) = gsub(colnames(df), pattern = "_9089", replacement = "")
return (df)
}
mutate_df <- function(df){
df = df %>%
mutate(pw_unit_of_pay = remove_null(pw_unit_of_pay),
wage_offer_unit_of_pay = remove_null(wage_offer_unit_of_pay),
wage_offer_from = is.numeric(wage_offer_from),
wage_offer_to = is.numeric(wage_offer_from),
pw_amount = is.numeric(pw_amount),
wage_offer_to = ifelse(is.na(wage_offer_to), wage_offer_from, wage_offer_to)
)
return (df)
}
remove_null <- function(x){
return (ifelse(x == "NULL", NA, x))
}
set_numeric <- function(x){
return (as.numeric(x))
}
set_date <- function(x, fmt){
return (as.Date(x, format = fmt))
}
set_char <- function(x){
return (as.character(x))
}
transf_yearly <- function(freq){
if (is.na(freq)){
return (NA)
} else if (freq == "Year"){
return (1)
} else if (freq == "Month"){
return (12)
} else if (freq == "Bi-Weekly"){
return (26)
} else if (freq == "Week"){
return (52)
} else if (freq == "Hour"){
return (2080)
}
}
clean_df <- function(df){
# ***************************************************************************** #
# Clean the data frame                                                          #
# Input: raw data frame                                                         #
# Return: data frame cleaned                                                    #
# ***************************************************************************** #
df = select_col(df)
df = mutate_df(df)
df = df %>%
transmute(decision_date = set_date(decision_date, "%Y-%m-%d"),
case_received_date = set_date(case_received_date, "%Y-%m-%d"),
days_to_decide = decision_date - case_received_date,
case_status = set_char(remove_null(case_status)),
employer_name = set_char(remove_null(employer_name)),
employer_num_employees = set_numeric(remove_null(employer_num_employees)),
employer_yr_estab = set_numeric(remove_null(employer_yr_estab)),
pw_soc_title = set_char(remove_null(pw_soc_title)),
pw_amount = sapply(pw_unit_of_pay, transf_yearly) * pw_amount,
wage_offer_mean = (sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_from / 2) +
(sapply(wage_offer_unit_of_pay, transf_yearly) * wage_offer_to / 2),
job_info_work_city = set_char(remove_null(job_info_work_city)),
job_info_work_state = set_char(remove_null(job_info_work_state)),
job_info_job_title = set_char(remove_null(job_info_job_title)),
job_info_education = set_char(remove_null(job_info_education)),
job_info_major = set_char(remove_null(job_info_major)),
job_info_experience_num_months = set_numeric(remove_null(job_info_experience_num_months)),
country_of_citizenship = set_char(remove_null(country_of_citizenship)),
visa_type = set_char(remove_null(class_of_admission)),
foreign_worker_info_education = set_char(remove_null(foreign_worker_info_education)),
foreign_worker_info_major = set_char(remove_null(foreign_worker_info_major)),
fw_info_yr_rel_edu_completed = set_numeric(remove_null(fw_info_yr_rel_edu_completed)),
foreign_worker_info_inst = set_char(remove_null(foreign_worker_info_inst)),
naics_us_title = set_char(remove_null(naics_us_title))
)
return (df)
}
dataset = data.frame()
lst_fnames = read.csv("./data/lst_fnames.txt", header = FALSE)[[1]]
for (fname in lst_fnames){
path = paste0("./data/", fname)
temp = data.frame(read_xlsx(path = path, sheet = 1, col_names = TRUE), stringsAsFactors = FALSE)
temp = clean_df(temp)
dataset = rbind(dataset, temp)
}
rm(list = ls())
shiny::runApp()
rm(list = ls())
runApp()
