str(HairEyeColor)
female_bb = table(Sex)
HairEyeColor["Sex"]
HairEyeColor[:,:,1]
dimnames(HairEyeColor)
HairEyeColor$Hair
?as.table
table(HairEyeColor$Hair)
table(HairEyeColor$Sex)
as.data.frame(HairEyeColor)
# 1.
HYC_df = as.data.frame(HairEyeColor)
# 2.
HYC_df = as.data.frame(HairEyeColor)
HYC_df
df_filter = HYC_df %>%
filter(., Sex == "Female" & (Eyes == "Blue" | Eyes == "Brown"))
HYC_df
df_filter = HYC_df %>%
filter(., Sex == "Female" & (Eye == "Blue" | Eye == "Brown"))
df_filter
mosaicplotdf_filter, shade = TRUE)
mosaicplot(df_filter, shade = TRUE)
mosaicplot(as.table(df_filter), shade = TRUE)
as.table(df_filter)
mosaicplot(df_filter, shade = TRUE)
xtabs(Sex ~ Eye + Hair)
xtabs(Sex ~ Eye + Hair, df_filter)
data("HairEyeColor")
# 1.
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor
# 2.
subset(x = HairEyeColor, Eye == "Blue")
?`table-class`
?table
HairEyeColor[which(HairEyeColor$Eye == "Blue"),]
HairEyeColor["Sex"]
HairEyeColor["Eye"]
HairEyeColor[(HairEyeColor$Eye == "Blue"),]
HairEyeColor[c("Eye")]
colnames(HairEyeColor)
HairEyeColor[colnames(HairEyeColor) == "Blue"]
HairEyeColor
dim(HairEyeColor)
HairEyeColor[(HairEyeColor$Eye == "Blue"), ,]
HairEyeColor[(Eye == "Blue"), ,]
HairEyeColor[(Sex == "Female"), ,]
HairEyeColor[(Hair == "Black"), ,]
subset(HairEyeColor, Sex == "Female")
key(HairEyeColor)
# 2.
subset(x = HairEyeColor, Eye == "Blue")
HairEyeColor
HairEyeColor[1:5]
HairEyeColor[, Sex]
HairEyeColor[, 2]
HairEyeColor[, 2,]
HairEyeColor[, ,2]
HairEyeColor
HairEyeColor[, , 2]
HairEyeColor[,1:2 , 2]
# 2.
female_bb = HairEyeColor[,1:2 , 2]
mosaicplot(female_bb, shade = TRUE)
# 2.
female_bb = HairEyeColor[,1:2, Sex == "Female"]
# 2.
female_bb = HairEyeColor[,1:2, 2]
mosaicplot(female_bb, shade = TRUE)
# 2.
female_bb = HairEyeColor[,1:2, Female]
# 2.
female_bb = HairEyeColor[,1:2, "Female"]
female_bb
HairEyeColor
# 2.
female_bb = HairEyeColor[ ,c("Brown", "Blue"), "Female"]
female_bb
summary(temp)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
#1a Example numerical EDA.
summary(temp)
# We can also use str(),dim(),nrow(),ncol() to know the dataset
sd(temp$Body.Temp)
sd(temp$Heart.Rate)
# use sapply: sapply(temp, sd)
cor(temp$Body.Temp, temp$Heart.Rate) # Bivariate methods
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = T)
# bivariate density plot
plot(density(temp$Body.Temp[temp$Gender == "Female"]), col = "pink")
# 3.
t.test(temp$Body.Temp, mu=98.6, alternative = "two.sided")
males = temp %>%
filter(., Gender == "Male")
library(dplyr)
males = temp %>%
filter(., Gender == "Male")
females = temp %>%
filter(., Gender == "Female")
t.test(males$Body.Temp, females$Body.Temp, alternative = "two.sided")
library(dplyr)
Ma = temp %>% filter(Gender == 'Male')
Fe = temp %>% filter(Gender == 'Female')
avg = numeric()
for(i in 1:10000){
m = sample(Ma$Body.Temp, 65, replace=T)
f = sample(Fe$Body.Temp, 65, replace=T)
avg[i] = mean(f-m)
}
lower_bnd = mean(avg) - 2*sd(avg)
upper_bnd = mean(avg) + 2*sd(avg)
lower_bnd = mean(avg) - 2*sd(avg)
lower_bnd
upper_bnd
# 5.
var.test(females$Heart.Rate, males$Heart.Rate, alternative = "less")
library(ggplot2)
data("PlantGrowth")
# 1.
ggplot(data = PlantGrowth, aes(x = group, y = weight)) + geom_boxplot()
data("PlantGrowth")
# 2.
bartlett.test(x = PlantGrowth$weight, g = PlantGrowth$group)
# 3.
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
data("HairEyeColor")
# 1.
mosaicplot(HairEyeColor, shade = TRUE)
#2a Reducing the dataset to all hair colors, brown & blue eye colors, and just
#females.
reduced = HairEyeColor[,1:2,2]
#Chi-Squared test of independence.
reduced.test = chisq.test(reduced)
reduced.test
(reduced.test$observed - reduced.test$expected)^2/reduced.test$expected
reduced.test$observed - reduced.test$expected
rm(list = ls())
library(readxl)
library(dplyr)
select_col <- function(dt){
# ***************************************************************************** #
# Select the columns from the raw data that is relevant for the analysis        #
# Input: raw data frame                                                         #
# Return: data frame with the columns selected                                  #
# ***************************************************************************** #
# Vector with the desire columns
col_sel = c("DECISION_DATE",
"CASE_STATUS",
"CASE_RECEIVED_DATE",
"EMPLOYER_NAME",
"EMPLOYER_NUM_EMPLOYEES",
"EMPLOYER_YR_ESTAB",
"PW_SOC_TITLE",
"PW_AMOUNT_9089",
"PW_UNIT_OF_PAY_9089",
"WAGE_OFFER_FROM_9089",
"WAGE_OFFER_TO_9089",
"WAGE_OFFER_UNIT_OF_PAY_9089",
"JOB_INFO_WORK_CITY",
"JOB_INFO_WORK_STATE",
"JOB_INFO_JOB_TITLE",
"JOB_INFO_EDUCATION",
"JOB_INFO_MAJOR",
"JOB_INFO_EXPERIENCE_NUM_MONTHS",
"FOREIGN_WORKER_INFO_CITY",
"FOREIGN_WORKER_INFO_STATE",
"COUNTRY_OF_CITIZENSHIP",
"CLASS_OF_ADMISSION",
"FOREIGN_WORKER_INFO_EDUCATION",
"FOREIGN_WORKER_INFO_MAJOR",
"FW_INFO_YR_REL_EDU_COMPLETED",
"FOREIGN_WORKER_INFO_INST",
"NAICS_US_TITLE")
dt = dt %>%
select(., col_sel)
colnames(dt) = tolower(colnames(dt))
colnames(dt) = gsub(colnames(dt), pattern = "_9089", replacement = "")
return(dt)
}
amount_yearly <- function(freq){
if (is.na(freq)){
return (NA)
} else if (freq == "Year"){
return (1)
} else if (freq == "Month"){
return (12)
} else if (freq == "Bi-Weekly"){
return (26)
} else if (freq == "Week"){
return (52)
} else if (freq == "Hour"){
return (2080)
}
}
clean_df <- function(dt){
# ***************************************************************************** #
# Clean the data frame                                                          #
# Input: raw data frame                                                         #
# Return: data frame cleaned                                                    #
# ***************************************************************************** #
dt = select_col(dt)
#dt = lapply(dt, function(x) {gsub("NULL", NA, x)})
#  dt = dt %>%
#    mutate(wage_offer_to = ifelse(is.na(wage_offer_to), wage_offer_from, wage_offer_to))
#  dt = dt %>%
#    mutate(
#      pw_amount_y = amount_yearly(pw_unit_of_pay, pw_amount) * pw_amount,
#      wage_offer_to_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_to) * wage_offer_to,
#      wage_offer_from_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_from) * wage_offer_from,
#      mean_wage_offer = wage_offer_from_y + (wage_offer_to_y - wage_offer_from_y) / 2
#    )
return(dt)
}
setwd("~/Documents/NYCDSA/Bootcamp_Winter_2019/Project2-ShinyApp")
x = read_xlsx("./data/2015.xlsx", sheet = 1, col_names = TRUE)
y = clean_df(x)
dt = lapply(dt, function(x) {gsub("NULL", NA, x)})
dt = data.frame(lapply(dt, function(x) {gsub("NULL", NA, x)}))
View(dt)
dt = data.frame(lapply(y, function(x) {gsub("NULL", NA, x)}))
dt = lapply(y, function(x) {gsub("NULL", NA, x)})
y = clean_df(x)
clean_df <- function(dt){
# ***************************************************************************** #
# Clean the data frame                                                          #
# Input: raw data frame                                                         #
# Return: data frame cleaned                                                    #
# ***************************************************************************** #
dt = select_col(dt)
dt = data.frame(lapply(dt, function(x) {gsub("NULL", NA, x)}))
#  dt = dt %>%
#    mutate(wage_offer_to = ifelse(is.na(wage_offer_to), wage_offer_from, wage_offer_to))
#  dt = dt %>%
#    mutate(
#      pw_amount_y = amount_yearly(pw_unit_of_pay, pw_amount) * pw_amount,
#      wage_offer_to_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_to) * wage_offer_to,
#      wage_offer_from_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_from) * wage_offer_from,
#      mean_wage_offer = wage_offer_from_y + (wage_offer_to_y - wage_offer_from_y) / 2
#    )
return(dt)
}
y = clean_df(x)
z = sapply(y$wage_offer_unit_of_pay, amount_yearly)
z
z*y$wage_offer_from
class(y)
typeof(y)
class(y$wage_offer_from)
as.numeric(y$wage_offer_from)
z * as.numeric(y$wage_offer_from)
View(y)
class(y$decision_date)
class(y)
y[y == "NULL"]
clean_df <- function(dt){
# ***************************************************************************** #
# Clean the data frame                                                          #
# Input: raw data frame                                                         #
# Return: data frame cleaned                                                    #
# ***************************************************************************** #
dt = select_col(dt)
dt = data.frame(lapply(dt, function(x) {gsub("NULL", NA, x)}), stringsAsFactors = FALSE)
#  dt = dt %>%
#    mutate(wage_offer_to = ifelse(is.na(wage_offer_to), wage_offer_from, wage_offer_to))
#  dt = dt %>%
#    mutate(
#      pw_amount_y = amount_yearly(pw_unit_of_pay, pw_amount) * pw_amount,
#      wage_offer_to_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_to) * wage_offer_to,
#      wage_offer_from_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_from) * wage_offer_from,
#      mean_wage_offer = wage_offer_from_y + (wage_offer_to_y - wage_offer_from_y) / 2
#    )
return(dt)
}
y = clean_df(x)
class(y)
class(y$wage_offer_from)
class(y$decision_date)
clean_df <- function(dt){
# ***************************************************************************** #
# Clean the data frame                                                          #
# Input: raw data frame                                                         #
# Return: data frame cleaned                                                    #
# ***************************************************************************** #
dt = select_col(dt)
#  dt = data.frame(lapply(dt, function(x) {gsub("NULL", NA, x)}), stringsAsFactors = FALSE)
#  dt = dt %>%
#    mutate(wage_offer_to = ifelse(is.na(wage_offer_to), wage_offer_from, wage_offer_to))
#  dt = dt %>%
#    mutate(
#      pw_amount_y = amount_yearly(pw_unit_of_pay, pw_amount) * pw_amount,
#      wage_offer_to_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_to) * wage_offer_to,
#      wage_offer_from_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_from) * wage_offer_from,
#      mean_wage_offer = wage_offer_from_y + (wage_offer_to_y - wage_offer_from_y) / 2
#    )
return(dt)
}
y = clean_df(x)
class(y$wage_offer_from)
class(y$decision_date)
class(y$fw_info_yr_rel_edu_completed)
?lapply
class(y$case_received_date)
class(y$employer_num_employees)
class(y$employer_yr_estab)
class(y$pw_amount)
?get_string
library(stringr)
?get_string
?read.csv
y %>%
select(contains("date"))
to_date <- function(x, fmt){
as.Date(x, format = fmt)
}
y %>%
select(contains("date")) %>%
to_date(., "%y-%m-%d")
y %>%
select(., contains("date")) %>%
to_date(., "%y-%m-%d")
y %>%
select(., contains("date")) %>%
mutate(., to_date(., "%y-%m-%d"))
a=y %>%
select(., contains("date")) %>%
colnames(.)
a
a=y %>%
select(., contains("num"), contains("yr"), contains("amount"), contains("offer")) %>%
colnames(.)
a
a=y %>%
select(., contains("num"), contains("yr"), contains("amount"), contains("from"), contains("to")) %>%
colnames(.)
a
a=y %>%
select(., contains(c("num", "yr"))) %>%
colnames(.)
to_num <- function(dt, vec_col){
for (coln in vec_col){
dt$coln = as.numeric(dt$coln)
}
}
y = clean_df(x)
class(y)
class(y$employer_num_employees)
class(y$wage_offer_from)
to_date <- function(dt, vec_col, fmt){
for (coln in vec_col){
dt$coln = as.Date(dt$coln, format = fmt)
}
}
select_col <- function(dt){
# ***************************************************************************** #
# Select the columns from the raw data that is relevant for the analysis        #
# Input: raw data frame                                                         #
# Return: data frame with the columns selected                                  #
# ***************************************************************************** #
# Vector with the desire columns
col_sel = c("DECISION_DATE",
"CASE_STATUS",
"CASE_RECEIVED_DATE",
"EMPLOYER_NAME",
"EMPLOYER_NUM_EMPLOYEES",
"EMPLOYER_YR_ESTAB",
"PW_SOC_TITLE",
"PW_AMOUNT_9089",
"PW_UNIT_OF_PAY_9089",
"WAGE_OFFER_FROM_9089",
"WAGE_OFFER_TO_9089",
"WAGE_OFFER_UNIT_OF_PAY_9089",
"JOB_INFO_WORK_CITY",
"JOB_INFO_WORK_STATE",
"JOB_INFO_JOB_TITLE",
"JOB_INFO_EDUCATION",
"JOB_INFO_MAJOR",
"JOB_INFO_EXPERIENCE_NUM_MONTHS",
"FOREIGN_WORKER_INFO_CITY",
"FOREIGN_WORKER_INFO_STATE",
"COUNTRY_OF_CITIZENSHIP",
"CLASS_OF_ADMISSION",
"FOREIGN_WORKER_INFO_EDUCATION",
"FOREIGN_WORKER_INFO_MAJOR",
"FW_INFO_YR_REL_EDU_COMPLETED",
"FOREIGN_WORKER_INFO_INST",
"NAICS_US_TITLE")
dt = dt %>%
select(., col_sel)
colnames(dt) = tolower(colnames(dt))
colnames(dt) = gsub(colnames(dt), pattern = "_9089", replacement = "")
dt = data.frame(lapply(dt, function(x) {gsub("NULL", NA, x)}), stringsAsFactors = FALSE)
# Select numeric columns and change the class to numeric
vec = dt %>%
select(., contains("num"), contains("yr"), contains("amount"), contains("from"), contains("to")) %>%
colnames(.)
to_num(dt, vec)
# Select date columns and change the class to date
vec = dt %>%
select(., contains("date")) %>%
colnames(.)
to_date(dt, vec, "%Y-%m-%d")
}
clean_df <- function(dt){
# ***************************************************************************** #
# Clean the data frame                                                          #
# Input: raw data frame                                                         #
# Return: data frame cleaned                                                    #
# ***************************************************************************** #
dt = select_col(dt)
dt = dt %>%
mutate(wage_offer_to = ifelse(is.na(wage_offer_to), wage_offer_from, wage_offer_to))
#  dt = dt %>%
#    mutate(
#      pw_amount_y = amount_yearly(pw_unit_of_pay, pw_amount) * pw_amount,
#      wage_offer_to_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_to) * wage_offer_to,
#      wage_offer_from_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_from) * wage_offer_from,
#      mean_wage_offer = wage_offer_from_y + (wage_offer_to_y - wage_offer_from_y) / 2
#    )
return(dt)
}
clean_df <- function(dt){
# ***************************************************************************** #
# Clean the data frame                                                          #
# Input: raw data frame                                                         #
# Return: data frame cleaned                                                    #
# ***************************************************************************** #
dt = select_col(dt)
dt = dt %>%
mutate(wage_offer_to = ifelse(is.na(wage_offer_to), wage_offer_from, wage_offer_to))
#  dt = dt %>%
#    mutate(
#      pw_amount_y = amount_yearly(pw_unit_of_pay, pw_amount) * pw_amount,
#      wage_offer_to_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_to) * wage_offer_to,
#      wage_offer_from_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_from) * wage_offer_from,
#      mean_wage_offer = wage_offer_from_y + (wage_offer_to_y - wage_offer_from_y) / 2
#    )
}
y = clean_df(x)
y = clean_df(x)
select_col <- function(dt){
# ***************************************************************************** #
# Select the columns from the raw data that is relevant for the analysis        #
# Input: raw data frame                                                         #
# Return: data frame with the columns selected                                  #
# ***************************************************************************** #
# Vector with the desire columns
col_sel = c("DECISION_DATE",
"CASE_STATUS",
"CASE_RECEIVED_DATE",
"EMPLOYER_NAME",
"EMPLOYER_NUM_EMPLOYEES",
"EMPLOYER_YR_ESTAB",
"PW_SOC_TITLE",
"PW_AMOUNT_9089",
"PW_UNIT_OF_PAY_9089",
"WAGE_OFFER_FROM_9089",
"WAGE_OFFER_TO_9089",
"WAGE_OFFER_UNIT_OF_PAY_9089",
"JOB_INFO_WORK_CITY",
"JOB_INFO_WORK_STATE",
"JOB_INFO_JOB_TITLE",
"JOB_INFO_EDUCATION",
"JOB_INFO_MAJOR",
"JOB_INFO_EXPERIENCE_NUM_MONTHS",
"FOREIGN_WORKER_INFO_CITY",
"FOREIGN_WORKER_INFO_STATE",
"COUNTRY_OF_CITIZENSHIP",
"CLASS_OF_ADMISSION",
"FOREIGN_WORKER_INFO_EDUCATION",
"FOREIGN_WORKER_INFO_MAJOR",
"FW_INFO_YR_REL_EDU_COMPLETED",
"FOREIGN_WORKER_INFO_INST",
"NAICS_US_TITLE")
dt = dt %>%
select(., col_sel)
colnames(dt) = tolower(colnames(dt))
colnames(dt) = gsub(colnames(dt), pattern = "_9089", replacement = "")
dt = data.frame(lapply(dt, function(x) {gsub("NULL", NA, x)}), stringsAsFactors = FALSE)
# Select numeric columns and change the class to numeric
vec = dt %>%
select(., contains("num"), contains("yr"), contains("amount"), contains("from"), contains("to")) %>%
colnames(.)
#to_num(dt, vec)
# Select date columns and change the class to date
vec = dt %>%
select(., contains("date")) %>%
colnames(.)
#to_date(dt, vec, "%Y-%m-%d")
}
clean_df <- function(dt){
# ***************************************************************************** #
# Clean the data frame                                                          #
# Input: raw data frame                                                         #
# Return: data frame cleaned                                                    #
# ***************************************************************************** #
dt = select_col(dt)
dt = dt %>%
mutate(wage_offer_to = ifelse(is.na(wage_offer_to), wage_offer_from, wage_offer_to))
#  dt = dt %>%
#    mutate(
#      pw_amount_y = amount_yearly(pw_unit_of_pay, pw_amount) * pw_amount,
#      wage_offer_to_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_to) * wage_offer_to,
#      wage_offer_from_y = amount_yearly(wage_offer_unit_of_pay, wage_offer_from) * wage_offer_from,
#      mean_wage_offer = wage_offer_from_y + (wage_offer_to_y - wage_offer_from_y) / 2
#    )
}
y = clean_df(x)
class(y)
class(y$wage_offer_to)
